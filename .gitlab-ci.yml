# workflow:
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main" || ($CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" )   # only run on a direct push to main or on a merge request to main

stages:             # these stages (jobs) forms the CICD pipeline
  - mavenbuild      # this is a JOB to build your Springboot application
  - maventest       # this is a JOB to run tests in your Springboot application (it's okay you don't have any test for now)
  - mavendeploy     # this is a JOB to deploy your Springboot application on your server
  - androidbuild    # this is a JOB to build your Android application
  - androidtest     # this is a JOB to run tests in your Android application (it's okay you don't have any test for now)

maven-build:            
  stage: mavenbuild     # one of the stages listed above
  tags:                 # to specify which runner to execute this job
    - backend-cicd      # change to your runner's tag
  script:               # what to execute for this job
    - echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk" | sudo tee '/etc/java/maven.conf'   # overwrite maven conf since it gets messed up when they restart the server every week
    - cd Backend        # change 'Backend' to to where you have the pom.xml (do not add / in the beginning)
    - mvn package       # maven package
  artifacts:            # where to output the packaged jar file, change 'Backend' to to where you have the pom.xml
    paths:
    - Backend/target/*.jar
  only:
    changes:
      - Backend/**/*

maven-test:             
  stage: maventest     # one of the stages listed above
  tags:
    - backend-cicd     # change to your runner's tag
  script:
    - cd Backend       # change 'Backend' to to where you have the pom.xml (do not add / in the beginning)
    - mvn test         # maven test
  only:
    changes:
      - Backend/**/*

auto-deploy:
  stage: mavendeploy    # one of the stages listed above
  tags:
    - backend-cicd        # change to your runner's tag
  script:               # script to run the deployment service you created
    - cd Backend        # change 'Backend' to to where you have the pom.xml (do not add / in the beginning)
    - sudo mv target/*.jar /hb403/gitlab-cd/geoexplore-deployed.jar 
    - sudo systemctl stop system-web-demo
    - sudo systemctl start system-web-demo
  only:
    refs:
      - main
    changes:
      - Backend/**/*

android-build:
  image: afirefly/android-ci:java17 # Docker image that has Android environments installed     gjandres/android-ci:latest
  stage: androidbuild               # one of the stages listed above
  before_script:                    # enable gradlew, change 'Frontend' to where you have 'gradlew'
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - touch Frontend/GeoExploreApp/local.properties
    - chmod +x ./Frontend/GeoExploreApp/gradlew
  tags:
    - frontend-cicd                  # change to your runner's tag
  script:
    - cd Frontend/GeoExploreApp                 # change 'Frontend' to where you have 'gradlew' (do not add / in the beginning)
    - ./gradlew build               # gradle build
  only:
    changes:
      - Frontend/**/*

android-test:
  image: afirefly/android-ci:java17
  stage: androidtest               # one of the stages listed above
  before_script:                   # enable gradlew, change 'Frontend' to where you have 'gradlew'
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - touch Frontend/GeoExploreApp/local.properties
    - chmod +x ./Frontend/GeoExploreApp/gradlew
  tags:
    - frontend-cicd                 # change to your runner's tag
  script:
    - cd Frontend/GeoExploreApp                  # change 'Frontend' to where you have 'gradlew' (do not add / in the beginning)
    - ./gradlew test               # gradle test
  only:
    changes:
      - Frontend/**/*
