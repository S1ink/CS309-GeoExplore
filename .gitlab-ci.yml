# workflow:
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main" || ($CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" )   # only run on a direct push to main or on a merge request to main

stages:             # these stages (jobs) forms the CICD pipeline
  - androidbuild    # this is a JOB to build your Android application
  - androidtest     # this is a JOB to run tests in your Android application (it's okay you don't have any test for now)

android-build:
  image: afirefly/android-ci:java17 # Docker image that has Android environments installed     gjandres/android-ci:latest
  stage: androidbuild               # one of the stages listed above
  before_script:                    # enable gradlew, change 'Frontend' to where you have 'gradlew'
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - touch Frontend/GeoExploreApp/local.properties
    - chmod +x ./Frontend/GeoExploreApp/gradlew
  tags:
    - aditi-cicd                  # change to your runner's tag
  script:
    - cd Frontend/GeoExploreApp                 # change 'Frontend' to where you have 'gradlew' (do not add / in the beginning)
    - ./gradlew build               # gradle build
 


android-test:
   image: afirefly/android-ci:java17
   stage: androidtest               # one of the stages listed above
   before_script:                   # enable gradlew, change 'Frontend' to where you have 'gradlew'
     - export GRADLE_USER_HOME=`pwd`/.gradle
     - touch Frontend/GeoExploreApp/local.properties
     - chmod +x ./Frontend/GeoExploreApp/gradlew
   tags:
    - aditi-cicd                 # change to your runner's tag
   script:
     - cd Frontend/GeoExploreApp                  # change 'Frontend' to where you have 'gradlew' (do not add / in the beginning)
     - ./gradlew test               # gradle test


