package hb403.geoexplore.controllers;

import hb403.geoexplore.datatype.marker.EventMarker;
import hb403.geoexplore.datatype.marker.repository.EventRepository;
import hb403.geoexplore.util.GeometryUtil;

import java.util.*;

import io.swagger.v3.oas.annotations.Operation;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;


@RestController
public class EventController {
	
	@Autowired
	protected EventRepository events_repo;


	/** [C]rudl - Add a new event to the database */
	@Operation(summary = "Add a new event to the database")
	@PostMapping(path = "geomap/events")
	public @ResponseBody EventMarker saveEvent(@RequestBody EventMarker event) {
		if(event != null) {
			event.nullifyId();
			event.enforceLocationIO();
			return this.events_repo.save(event);
		}
		return null;
	}
	/** c[R]udl - Get an event from the database from its id */
	@Operation(summary = "Get an event from the database from its id")
	@GetMapping(path = "geomap/events/{id}")
	public @ResponseBody EventMarker getEventById(@PathVariable Long id) {
		if(id != null) {
			try {
				final EventMarker e = this.events_repo.findById(id).get();
				e.enforceLocationTable();
				return e;
			} catch(Exception e) {
				// continue >>> (return null)
			}
		}
		return null;
	}
	/** cr[U]dl - Update an event already in the database by its id */
	@Operation(summary = "Update an event already in the database by its id")
	@PutMapping(path = "geomap/events/{id}")
	public @ResponseBody EventMarker updateEventById(@PathVariable Long id, @RequestBody EventMarker event) {
		if(id != null && event != null) {
			event.setId(id);
			event.enforceLocationIO();
			return this.events_repo.save(event);
		}
		return null;
	}
	/** cru[D]l - Delete an event in the database by its id */
	@Operation(summary = "Delete an event in the database by its id")
	@DeleteMapping(path = "geomap/events/{id}")
	public @ResponseBody EventMarker deleteEventById(@PathVariable Long id) {
		if(id != null) {
			try {
				final EventMarker ref = this.getEventById(id);
				this.events_repo.deleteById(id);
				ref.enforceLocationTable();
				return ref;
			} catch(Exception e) {
				// continue >>> (return null)
			}
		}
		return null;
	}

	/** crud[L] - Get a list of all the events in the database */
	@Operation(summary = "Get a list of all the events in the database")
	@GetMapping(path = "geomap/events")
	public @ResponseBody List<EventMarker> getAllEvents() {
		final List<EventMarker> events = this.events_repo.findAll();
		for(EventMarker e : events) {
			e.enforceLocationTable();
		}
		return events;
	}



	/** Returns the list of events within the bounds generated by the provided WKT geometry string */
	@Operation(summary = "Get a list of the events whose locations are bounded by the provided WKT geometry string")
	@GetMapping(path = "geomap/events/within")
	public @ResponseBody List<EventMarker> getEventsWithinBounds(@RequestBody String wkt_bounds_geom) {	// takes in 'well known text' for the bounding geometry --> may define special json formats for predefined bounds later
		try {
			final List<EventMarker> bounded = this.events_repo.findWithin( GeometryUtil.getGeometry(wkt_bounds_geom) );
			// System.out.println("Recieved " + bounded.size() + " bounded events");
			for(EventMarker e : bounded) {
				e.enforceLocationTable();
			}
			return bounded;
		} catch(Exception e) {
			System.out.println("EventMarker.getEventsWithinBounds(): Encountered exception! -- " + e.getMessage());
			// continue >>> (return null)
		}
		return null;
	}



	/** TODO:
     * - get marker creator (User) by marker id
     * - get marker tags (MarkerTag[]) by marker id
     * - append [NEW] marker tag to list, accessed by marker id
     * - append [EXISTING] marker tag to list, accessed by marker id and tag id
     * - append User to marker "listed users" by marker id and user id
     */


}
